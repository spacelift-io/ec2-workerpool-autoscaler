// Code generated by mockery v2.42.1. DO NOT EDIT.

package internal_test

import (
	context "context"

	autoscalingtypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"

	internal "github.com/spacelift-io/awsautoscalr/internal"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

// MockController is an autogenerated mock type for the ControllerInterface type
type MockController struct {
	mock.Mock
}

// DescribeInstances provides a mock function with given fields: ctx, instanceIDs
func (_m *MockController) DescribeInstances(ctx context.Context, instanceIDs []string) ([]types.Instance, error) {
	ret := _m.Called(ctx, instanceIDs)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstances")
	}

	var r0 []types.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]types.Instance, error)); ok {
		return rf(ctx, instanceIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []types.Instance); ok {
		r0 = rf(ctx, instanceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, instanceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DrainWorker provides a mock function with given fields: ctx, workerID
func (_m *MockController) DrainWorker(ctx context.Context, workerID string) (bool, error) {
	ret := _m.Called(ctx, workerID)

	if len(ret) == 0 {
		panic("no return value specified for DrainWorker")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, workerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, workerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutoscalingGroup provides a mock function with given fields: ctx
func (_m *MockController) GetAutoscalingGroup(ctx context.Context) (*autoscalingtypes.AutoScalingGroup, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAutoscalingGroup")
	}

	var r0 *autoscalingtypes.AutoScalingGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*autoscalingtypes.AutoScalingGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *autoscalingtypes.AutoScalingGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingtypes.AutoScalingGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkerPool provides a mock function with given fields: ctx
func (_m *MockController) GetWorkerPool(ctx context.Context) (*internal.WorkerPool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkerPool")
	}

	var r0 *internal.WorkerPool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*internal.WorkerPool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *internal.WorkerPool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.WorkerPool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KillInstance provides a mock function with given fields: ctx, instanceID
func (_m *MockController) KillInstance(ctx context.Context, instanceID string) error {
	ret := _m.Called(ctx, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for KillInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, instanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScaleUpASG provides a mock function with given fields: ctx, desiredCapacity
func (_m *MockController) ScaleUpASG(ctx context.Context, desiredCapacity int32) error {
	ret := _m.Called(ctx, desiredCapacity)

	if len(ret) == 0 {
		panic("no return value specified for ScaleUpASG")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, desiredCapacity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
