// Code generated by mockery v2.30.16. DO NOT EDIT.

package ifaces

import (
	context "context"

	graphql "github.com/shurcooL/graphql"
	mock "github.com/stretchr/testify/mock"
)

// MockSpacelift is an autogenerated mock type for the Spacelift type
type MockSpacelift struct {
	mock.Mock
}

// Mutate provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockSpacelift) Mutate(_a0 context.Context, _a1 interface{}, _a2 map[string]interface{}, _a3 ...graphql.RequestOption) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...graphql.RequestOption) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockSpacelift) Query(_a0 context.Context, _a1 interface{}, _a2 map[string]interface{}, _a3 ...graphql.RequestOption) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...graphql.RequestOption) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSpacelift creates a new instance of MockSpacelift. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpacelift(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpacelift {
	mock := &MockSpacelift{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
